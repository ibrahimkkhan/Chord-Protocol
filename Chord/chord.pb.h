// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chord.proto

#ifndef PROTOBUF_INCLUDED_chord_2eproto
#define PROTOBUF_INCLUDED_chord_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chord_2eproto 

namespace protobuf_chord_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chord_2eproto
namespace protocol {
class Call;
class CallDefaultTypeInternal;
extern CallDefaultTypeInternal _Call_default_instance_;
class CheckPredecessorArgs;
class CheckPredecessorArgsDefaultTypeInternal;
extern CheckPredecessorArgsDefaultTypeInternal _CheckPredecessorArgs_default_instance_;
class CheckPredecessorRet;
class CheckPredecessorRetDefaultTypeInternal;
extern CheckPredecessorRetDefaultTypeInternal _CheckPredecessorRet_default_instance_;
class FindSuccessorArgs;
class FindSuccessorArgsDefaultTypeInternal;
extern FindSuccessorArgsDefaultTypeInternal _FindSuccessorArgs_default_instance_;
class FindSuccessorRet;
class FindSuccessorRetDefaultTypeInternal;
extern FindSuccessorRetDefaultTypeInternal _FindSuccessorRet_default_instance_;
class GetPredecessorArgs;
class GetPredecessorArgsDefaultTypeInternal;
extern GetPredecessorArgsDefaultTypeInternal _GetPredecessorArgs_default_instance_;
class GetPredecessorRet;
class GetPredecessorRetDefaultTypeInternal;
extern GetPredecessorRetDefaultTypeInternal _GetPredecessorRet_default_instance_;
class GetSuccessorListArgs;
class GetSuccessorListArgsDefaultTypeInternal;
extern GetSuccessorListArgsDefaultTypeInternal _GetSuccessorListArgs_default_instance_;
class GetSuccessorListRet;
class GetSuccessorListRetDefaultTypeInternal;
extern GetSuccessorListRetDefaultTypeInternal _GetSuccessorListRet_default_instance_;
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NotifyArgs;
class NotifyArgsDefaultTypeInternal;
extern NotifyArgsDefaultTypeInternal _NotifyArgs_default_instance_;
class NotifyRet;
class NotifyRetDefaultTypeInternal;
extern NotifyRetDefaultTypeInternal _NotifyRet_default_instance_;
class Return;
class ReturnDefaultTypeInternal;
extern ReturnDefaultTypeInternal _Return_default_instance_;
}  // namespace protocol
namespace google {
namespace protobuf {
template<> ::protocol::Call* Arena::CreateMaybeMessage<::protocol::Call>(Arena*);
template<> ::protocol::CheckPredecessorArgs* Arena::CreateMaybeMessage<::protocol::CheckPredecessorArgs>(Arena*);
template<> ::protocol::CheckPredecessorRet* Arena::CreateMaybeMessage<::protocol::CheckPredecessorRet>(Arena*);
template<> ::protocol::FindSuccessorArgs* Arena::CreateMaybeMessage<::protocol::FindSuccessorArgs>(Arena*);
template<> ::protocol::FindSuccessorRet* Arena::CreateMaybeMessage<::protocol::FindSuccessorRet>(Arena*);
template<> ::protocol::GetPredecessorArgs* Arena::CreateMaybeMessage<::protocol::GetPredecessorArgs>(Arena*);
template<> ::protocol::GetPredecessorRet* Arena::CreateMaybeMessage<::protocol::GetPredecessorRet>(Arena*);
template<> ::protocol::GetSuccessorListArgs* Arena::CreateMaybeMessage<::protocol::GetSuccessorListArgs>(Arena*);
template<> ::protocol::GetSuccessorListRet* Arena::CreateMaybeMessage<::protocol::GetSuccessorListRet>(Arena*);
template<> ::protocol::Node* Arena::CreateMaybeMessage<::protocol::Node>(Arena*);
template<> ::protocol::NotifyArgs* Arena::CreateMaybeMessage<::protocol::NotifyArgs>(Arena*);
template<> ::protocol::NotifyRet* Arena::CreateMaybeMessage<::protocol::NotifyRet>(Arena*);
template<> ::protocol::Return* Arena::CreateMaybeMessage<::protocol::Return>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protocol {

// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const final {
    return CreateMaybeMessage<Node>(NULL);
  }

  Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string address = 2;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required uint32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protocol.Node)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_address();
  void clear_has_address();
  void set_has_port();
  void clear_has_port();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::uint32 port_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Call) */ {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Call(Call&& from) noexcept
    : Call() {
    *this = ::std::move(from);
  }

  inline Call& operator=(Call&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Call* internal_default_instance() {
    return reinterpret_cast<const Call*>(
               &_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Call* other);
  friend void swap(Call& a, Call& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Call* New() const final {
    return CreateMaybeMessage<Call>(NULL);
  }

  Call* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Call>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Call* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required bytes args = 2;
  bool has_args() const;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const void* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:protocol.Call)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_args();
  void clear_has_args();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Return : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.Return) */ {
 public:
  Return();
  virtual ~Return();

  Return(const Return& from);

  inline Return& operator=(const Return& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Return(Return&& from) noexcept
    : Return() {
    *this = ::std::move(from);
  }

  inline Return& operator=(Return&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Return& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Return* internal_default_instance() {
    return reinterpret_cast<const Return*>(
               &_Return_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Return* other);
  friend void swap(Return& a, Return& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Return* New() const final {
    return CreateMaybeMessage<Return>(NULL);
  }

  Return* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Return>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Return& from);
  void MergeFrom(const Return& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Return* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // required bool success = 1;
  bool has_success() const;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:protocol.Return)
 private:
  void set_has_success();
  void clear_has_success();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  bool success_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindSuccessorArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FindSuccessorArgs) */ {
 public:
  FindSuccessorArgs();
  virtual ~FindSuccessorArgs();

  FindSuccessorArgs(const FindSuccessorArgs& from);

  inline FindSuccessorArgs& operator=(const FindSuccessorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindSuccessorArgs(FindSuccessorArgs&& from) noexcept
    : FindSuccessorArgs() {
    *this = ::std::move(from);
  }

  inline FindSuccessorArgs& operator=(FindSuccessorArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindSuccessorArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindSuccessorArgs* internal_default_instance() {
    return reinterpret_cast<const FindSuccessorArgs*>(
               &_FindSuccessorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FindSuccessorArgs* other);
  friend void swap(FindSuccessorArgs& a, FindSuccessorArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindSuccessorArgs* New() const final {
    return CreateMaybeMessage<FindSuccessorArgs>(NULL);
  }

  FindSuccessorArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindSuccessorArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindSuccessorArgs& from);
  void MergeFrom(const FindSuccessorArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindSuccessorArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:protocol.FindSuccessorArgs)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FindSuccessorRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.FindSuccessorRet) */ {
 public:
  FindSuccessorRet();
  virtual ~FindSuccessorRet();

  FindSuccessorRet(const FindSuccessorRet& from);

  inline FindSuccessorRet& operator=(const FindSuccessorRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindSuccessorRet(FindSuccessorRet&& from) noexcept
    : FindSuccessorRet() {
    *this = ::std::move(from);
  }

  inline FindSuccessorRet& operator=(FindSuccessorRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FindSuccessorRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindSuccessorRet* internal_default_instance() {
    return reinterpret_cast<const FindSuccessorRet*>(
               &_FindSuccessorRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FindSuccessorRet* other);
  friend void swap(FindSuccessorRet& a, FindSuccessorRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindSuccessorRet* New() const final {
    return CreateMaybeMessage<FindSuccessorRet>(NULL);
  }

  FindSuccessorRet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindSuccessorRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindSuccessorRet& from);
  void MergeFrom(const FindSuccessorRet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindSuccessorRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  private:
  const ::protocol::Node& _internal_node() const;
  public:
  const ::protocol::Node& node() const;
  ::protocol::Node* release_node();
  ::protocol::Node* mutable_node();
  void set_allocated_node(::protocol::Node* node);

  // @@protoc_insertion_point(class_scope:protocol.FindSuccessorRet)
 private:
  void set_has_node();
  void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::Node* node_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.NotifyArgs) */ {
 public:
  NotifyArgs();
  virtual ~NotifyArgs();

  NotifyArgs(const NotifyArgs& from);

  inline NotifyArgs& operator=(const NotifyArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyArgs(NotifyArgs&& from) noexcept
    : NotifyArgs() {
    *this = ::std::move(from);
  }

  inline NotifyArgs& operator=(NotifyArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyArgs* internal_default_instance() {
    return reinterpret_cast<const NotifyArgs*>(
               &_NotifyArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(NotifyArgs* other);
  friend void swap(NotifyArgs& a, NotifyArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyArgs* New() const final {
    return CreateMaybeMessage<NotifyArgs>(NULL);
  }

  NotifyArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyArgs& from);
  void MergeFrom(const NotifyArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .protocol.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  private:
  const ::protocol::Node& _internal_node() const;
  public:
  const ::protocol::Node& node() const;
  ::protocol::Node* release_node();
  ::protocol::Node* mutable_node();
  void set_allocated_node(::protocol::Node* node);

  // @@protoc_insertion_point(class_scope:protocol.NotifyArgs)
 private:
  void set_has_node();
  void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::Node* node_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NotifyRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.NotifyRet) */ {
 public:
  NotifyRet();
  virtual ~NotifyRet();

  NotifyRet(const NotifyRet& from);

  inline NotifyRet& operator=(const NotifyRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyRet(NotifyRet&& from) noexcept
    : NotifyRet() {
    *this = ::std::move(from);
  }

  inline NotifyRet& operator=(NotifyRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyRet* internal_default_instance() {
    return reinterpret_cast<const NotifyRet*>(
               &_NotifyRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NotifyRet* other);
  friend void swap(NotifyRet& a, NotifyRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyRet* New() const final {
    return CreateMaybeMessage<NotifyRet>(NULL);
  }

  NotifyRet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NotifyRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NotifyRet& from);
  void MergeFrom(const NotifyRet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.NotifyRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckPredecessorArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.CheckPredecessorArgs) */ {
 public:
  CheckPredecessorArgs();
  virtual ~CheckPredecessorArgs();

  CheckPredecessorArgs(const CheckPredecessorArgs& from);

  inline CheckPredecessorArgs& operator=(const CheckPredecessorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckPredecessorArgs(CheckPredecessorArgs&& from) noexcept
    : CheckPredecessorArgs() {
    *this = ::std::move(from);
  }

  inline CheckPredecessorArgs& operator=(CheckPredecessorArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPredecessorArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckPredecessorArgs* internal_default_instance() {
    return reinterpret_cast<const CheckPredecessorArgs*>(
               &_CheckPredecessorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CheckPredecessorArgs* other);
  friend void swap(CheckPredecessorArgs& a, CheckPredecessorArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckPredecessorArgs* New() const final {
    return CreateMaybeMessage<CheckPredecessorArgs>(NULL);
  }

  CheckPredecessorArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckPredecessorArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckPredecessorArgs& from);
  void MergeFrom(const CheckPredecessorArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckPredecessorArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.CheckPredecessorArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CheckPredecessorRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.CheckPredecessorRet) */ {
 public:
  CheckPredecessorRet();
  virtual ~CheckPredecessorRet();

  CheckPredecessorRet(const CheckPredecessorRet& from);

  inline CheckPredecessorRet& operator=(const CheckPredecessorRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CheckPredecessorRet(CheckPredecessorRet&& from) noexcept
    : CheckPredecessorRet() {
    *this = ::std::move(from);
  }

  inline CheckPredecessorRet& operator=(CheckPredecessorRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPredecessorRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckPredecessorRet* internal_default_instance() {
    return reinterpret_cast<const CheckPredecessorRet*>(
               &_CheckPredecessorRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CheckPredecessorRet* other);
  friend void swap(CheckPredecessorRet& a, CheckPredecessorRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CheckPredecessorRet* New() const final {
    return CreateMaybeMessage<CheckPredecessorRet>(NULL);
  }

  CheckPredecessorRet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CheckPredecessorRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CheckPredecessorRet& from);
  void MergeFrom(const CheckPredecessorRet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckPredecessorRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.CheckPredecessorRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPredecessorArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.GetPredecessorArgs) */ {
 public:
  GetPredecessorArgs();
  virtual ~GetPredecessorArgs();

  GetPredecessorArgs(const GetPredecessorArgs& from);

  inline GetPredecessorArgs& operator=(const GetPredecessorArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPredecessorArgs(GetPredecessorArgs&& from) noexcept
    : GetPredecessorArgs() {
    *this = ::std::move(from);
  }

  inline GetPredecessorArgs& operator=(GetPredecessorArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPredecessorArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPredecessorArgs* internal_default_instance() {
    return reinterpret_cast<const GetPredecessorArgs*>(
               &_GetPredecessorArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetPredecessorArgs* other);
  friend void swap(GetPredecessorArgs& a, GetPredecessorArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPredecessorArgs* New() const final {
    return CreateMaybeMessage<GetPredecessorArgs>(NULL);
  }

  GetPredecessorArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPredecessorArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPredecessorArgs& from);
  void MergeFrom(const GetPredecessorArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPredecessorArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.GetPredecessorArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetPredecessorRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.GetPredecessorRet) */ {
 public:
  GetPredecessorRet();
  virtual ~GetPredecessorRet();

  GetPredecessorRet(const GetPredecessorRet& from);

  inline GetPredecessorRet& operator=(const GetPredecessorRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPredecessorRet(GetPredecessorRet&& from) noexcept
    : GetPredecessorRet() {
    *this = ::std::move(from);
  }

  inline GetPredecessorRet& operator=(GetPredecessorRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPredecessorRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPredecessorRet* internal_default_instance() {
    return reinterpret_cast<const GetPredecessorRet*>(
               &_GetPredecessorRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(GetPredecessorRet* other);
  friend void swap(GetPredecessorRet& a, GetPredecessorRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPredecessorRet* New() const final {
    return CreateMaybeMessage<GetPredecessorRet>(NULL);
  }

  GetPredecessorRet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetPredecessorRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetPredecessorRet& from);
  void MergeFrom(const GetPredecessorRet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPredecessorRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protocol.Node node = 1;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  private:
  const ::protocol::Node& _internal_node() const;
  public:
  const ::protocol::Node& node() const;
  ::protocol::Node* release_node();
  ::protocol::Node* mutable_node();
  void set_allocated_node(::protocol::Node* node);

  // @@protoc_insertion_point(class_scope:protocol.GetPredecessorRet)
 private:
  void set_has_node();
  void clear_has_node();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protocol::Node* node_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSuccessorListArgs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.GetSuccessorListArgs) */ {
 public:
  GetSuccessorListArgs();
  virtual ~GetSuccessorListArgs();

  GetSuccessorListArgs(const GetSuccessorListArgs& from);

  inline GetSuccessorListArgs& operator=(const GetSuccessorListArgs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSuccessorListArgs(GetSuccessorListArgs&& from) noexcept
    : GetSuccessorListArgs() {
    *this = ::std::move(from);
  }

  inline GetSuccessorListArgs& operator=(GetSuccessorListArgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSuccessorListArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuccessorListArgs* internal_default_instance() {
    return reinterpret_cast<const GetSuccessorListArgs*>(
               &_GetSuccessorListArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(GetSuccessorListArgs* other);
  friend void swap(GetSuccessorListArgs& a, GetSuccessorListArgs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSuccessorListArgs* New() const final {
    return CreateMaybeMessage<GetSuccessorListArgs>(NULL);
  }

  GetSuccessorListArgs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSuccessorListArgs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSuccessorListArgs& from);
  void MergeFrom(const GetSuccessorListArgs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuccessorListArgs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protocol.GetSuccessorListArgs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetSuccessorListRet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protocol.GetSuccessorListRet) */ {
 public:
  GetSuccessorListRet();
  virtual ~GetSuccessorListRet();

  GetSuccessorListRet(const GetSuccessorListRet& from);

  inline GetSuccessorListRet& operator=(const GetSuccessorListRet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSuccessorListRet(GetSuccessorListRet&& from) noexcept
    : GetSuccessorListRet() {
    *this = ::std::move(from);
  }

  inline GetSuccessorListRet& operator=(GetSuccessorListRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSuccessorListRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSuccessorListRet* internal_default_instance() {
    return reinterpret_cast<const GetSuccessorListRet*>(
               &_GetSuccessorListRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(GetSuccessorListRet* other);
  friend void swap(GetSuccessorListRet& a, GetSuccessorListRet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSuccessorListRet* New() const final {
    return CreateMaybeMessage<GetSuccessorListRet>(NULL);
  }

  GetSuccessorListRet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetSuccessorListRet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetSuccessorListRet& from);
  void MergeFrom(const GetSuccessorListRet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSuccessorListRet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protocol.Node successors = 1;
  int successors_size() const;
  void clear_successors();
  static const int kSuccessorsFieldNumber = 1;
  ::protocol::Node* mutable_successors(int index);
  ::google::protobuf::RepeatedPtrField< ::protocol::Node >*
      mutable_successors();
  const ::protocol::Node& successors(int index) const;
  ::protocol::Node* add_successors();
  const ::google::protobuf::RepeatedPtrField< ::protocol::Node >&
      successors() const;

  // @@protoc_insertion_point(class_scope:protocol.GetSuccessorListRet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protocol::Node > successors_;
  friend struct ::protobuf_chord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// required bytes id = 1;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Node::id() const {
  // @@protoc_insertion_point(field_get:protocol.Node.id)
  return id_.GetNoArena();
}
inline void Node::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Node.id)
}
#if LANG_CXX11
inline void Node::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Node.id)
}
#endif
inline void Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Node.id)
}
inline void Node::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Node.id)
}
inline ::std::string* Node::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.Node.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_id() {
  // @@protoc_insertion_point(field_release:protocol.Node.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Node.id)
}

// required string address = 2;
inline bool Node::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& Node::address() const {
  // @@protoc_insertion_point(field_get:protocol.Node.address)
  return address_.GetNoArena();
}
inline void Node::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Node.address)
}
#if LANG_CXX11
inline void Node::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Node.address)
}
#endif
inline void Node::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Node.address)
}
inline void Node::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Node.address)
}
inline ::std::string* Node::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:protocol.Node.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Node.address)
  if (!has_address()) {
    return NULL;
  }
  clear_has_address();
  return address_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Node.address)
}

// required uint32 port = 3;
inline bool Node::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Node::port() const {
  // @@protoc_insertion_point(field_get:protocol.Node.port)
  return port_;
}
inline void Node::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Node.port)
}

// -------------------------------------------------------------------

// Call

// required string name = 1;
inline bool Call::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Call::name() const {
  // @@protoc_insertion_point(field_get:protocol.Call.name)
  return name_.GetNoArena();
}
inline void Call::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Call.name)
}
#if LANG_CXX11
inline void Call::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Call.name)
}
#endif
inline void Call::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Call.name)
}
inline void Call::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Call.name)
}
inline ::std::string* Call::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protocol.Call.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Call.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Call.name)
}

// required bytes args = 2;
inline bool Call::has_args() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Call::set_has_args() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Call::clear_has_args() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Call::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_args();
}
inline const ::std::string& Call::args() const {
  // @@protoc_insertion_point(field_get:protocol.Call.args)
  return args_.GetNoArena();
}
inline void Call::set_args(const ::std::string& value) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Call.args)
}
#if LANG_CXX11
inline void Call::set_args(::std::string&& value) {
  set_has_args();
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Call.args)
}
#endif
inline void Call::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Call.args)
}
inline void Call::set_args(const void* value, size_t size) {
  set_has_args();
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Call.args)
}
inline ::std::string* Call::mutable_args() {
  set_has_args();
  // @@protoc_insertion_point(field_mutable:protocol.Call.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Call::release_args() {
  // @@protoc_insertion_point(field_release:protocol.Call.args)
  if (!has_args()) {
    return NULL;
  }
  clear_has_args();
  return args_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Call::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    set_has_args();
  } else {
    clear_has_args();
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:protocol.Call.args)
}

// -------------------------------------------------------------------

// Return

// required bool success = 1;
inline bool Return::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Return::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Return::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Return::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool Return::success() const {
  // @@protoc_insertion_point(field_get:protocol.Return.success)
  return success_;
}
inline void Return::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:protocol.Return.success)
}

// optional bytes value = 2;
inline bool Return::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Return::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Return::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Return::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Return::value() const {
  // @@protoc_insertion_point(field_get:protocol.Return.value)
  return value_.GetNoArena();
}
inline void Return::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Return.value)
}
#if LANG_CXX11
inline void Return::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Return.value)
}
#endif
inline void Return::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Return.value)
}
inline void Return::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Return.value)
}
inline ::std::string* Return::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:protocol.Return.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Return::release_value() {
  // @@protoc_insertion_point(field_release:protocol.Return.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Return::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:protocol.Return.value)
}

// -------------------------------------------------------------------

// FindSuccessorArgs

// required bytes id = 1;
inline bool FindSuccessorArgs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindSuccessorArgs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindSuccessorArgs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindSuccessorArgs::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& FindSuccessorArgs::id() const {
  // @@protoc_insertion_point(field_get:protocol.FindSuccessorArgs.id)
  return id_.GetNoArena();
}
inline void FindSuccessorArgs::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FindSuccessorArgs.id)
}
#if LANG_CXX11
inline void FindSuccessorArgs::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.FindSuccessorArgs.id)
}
#endif
inline void FindSuccessorArgs::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FindSuccessorArgs.id)
}
inline void FindSuccessorArgs::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FindSuccessorArgs.id)
}
inline ::std::string* FindSuccessorArgs::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:protocol.FindSuccessorArgs.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindSuccessorArgs::release_id() {
  // @@protoc_insertion_point(field_release:protocol.FindSuccessorArgs.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindSuccessorArgs::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.FindSuccessorArgs.id)
}

// -------------------------------------------------------------------

// FindSuccessorRet

// required .protocol.Node node = 1;
inline bool FindSuccessorRet::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FindSuccessorRet::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FindSuccessorRet::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FindSuccessorRet::clear_node() {
  if (node_ != NULL) node_->Clear();
  clear_has_node();
}
inline const ::protocol::Node& FindSuccessorRet::_internal_node() const {
  return *node_;
}
inline const ::protocol::Node& FindSuccessorRet::node() const {
  const ::protocol::Node* p = node_;
  // @@protoc_insertion_point(field_get:protocol.FindSuccessorRet.node)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Node*>(
      &::protocol::_Node_default_instance_);
}
inline ::protocol::Node* FindSuccessorRet::release_node() {
  // @@protoc_insertion_point(field_release:protocol.FindSuccessorRet.node)
  clear_has_node();
  ::protocol::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::protocol::Node* FindSuccessorRet::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.FindSuccessorRet.node)
  return node_;
}
inline void FindSuccessorRet::set_allocated_node(::protocol::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
  } else {
    clear_has_node();
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:protocol.FindSuccessorRet.node)
}

// -------------------------------------------------------------------

// NotifyArgs

// required .protocol.Node node = 1;
inline bool NotifyArgs::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyArgs::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyArgs::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyArgs::clear_node() {
  if (node_ != NULL) node_->Clear();
  clear_has_node();
}
inline const ::protocol::Node& NotifyArgs::_internal_node() const {
  return *node_;
}
inline const ::protocol::Node& NotifyArgs::node() const {
  const ::protocol::Node* p = node_;
  // @@protoc_insertion_point(field_get:protocol.NotifyArgs.node)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Node*>(
      &::protocol::_Node_default_instance_);
}
inline ::protocol::Node* NotifyArgs::release_node() {
  // @@protoc_insertion_point(field_release:protocol.NotifyArgs.node)
  clear_has_node();
  ::protocol::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::protocol::Node* NotifyArgs::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.NotifyArgs.node)
  return node_;
}
inline void NotifyArgs::set_allocated_node(::protocol::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
  } else {
    clear_has_node();
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:protocol.NotifyArgs.node)
}

// -------------------------------------------------------------------

// NotifyRet

// -------------------------------------------------------------------

// CheckPredecessorArgs

// -------------------------------------------------------------------

// CheckPredecessorRet

// -------------------------------------------------------------------

// GetPredecessorArgs

// -------------------------------------------------------------------

// GetPredecessorRet

// optional .protocol.Node node = 1;
inline bool GetPredecessorRet::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetPredecessorRet::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetPredecessorRet::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetPredecessorRet::clear_node() {
  if (node_ != NULL) node_->Clear();
  clear_has_node();
}
inline const ::protocol::Node& GetPredecessorRet::_internal_node() const {
  return *node_;
}
inline const ::protocol::Node& GetPredecessorRet::node() const {
  const ::protocol::Node* p = node_;
  // @@protoc_insertion_point(field_get:protocol.GetPredecessorRet.node)
  return p != NULL ? *p : *reinterpret_cast<const ::protocol::Node*>(
      &::protocol::_Node_default_instance_);
}
inline ::protocol::Node* GetPredecessorRet::release_node() {
  // @@protoc_insertion_point(field_release:protocol.GetPredecessorRet.node)
  clear_has_node();
  ::protocol::Node* temp = node_;
  node_ = NULL;
  return temp;
}
inline ::protocol::Node* GetPredecessorRet::mutable_node() {
  set_has_node();
  if (node_ == NULL) {
    auto* p = CreateMaybeMessage<::protocol::Node>(GetArenaNoVirtual());
    node_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.GetPredecessorRet.node)
  return node_;
}
inline void GetPredecessorRet::set_allocated_node(::protocol::Node* node) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_;
  }
  if (node) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
  } else {
    clear_has_node();
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:protocol.GetPredecessorRet.node)
}

// -------------------------------------------------------------------

// GetSuccessorListArgs

// -------------------------------------------------------------------

// GetSuccessorListRet

// repeated .protocol.Node successors = 1;
inline int GetSuccessorListRet::successors_size() const {
  return successors_.size();
}
inline void GetSuccessorListRet::clear_successors() {
  successors_.Clear();
}
inline ::protocol::Node* GetSuccessorListRet::mutable_successors(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.GetSuccessorListRet.successors)
  return successors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protocol::Node >*
GetSuccessorListRet::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:protocol.GetSuccessorListRet.successors)
  return &successors_;
}
inline const ::protocol::Node& GetSuccessorListRet::successors(int index) const {
  // @@protoc_insertion_point(field_get:protocol.GetSuccessorListRet.successors)
  return successors_.Get(index);
}
inline ::protocol::Node* GetSuccessorListRet::add_successors() {
  // @@protoc_insertion_point(field_add:protocol.GetSuccessorListRet.successors)
  return successors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protocol::Node >&
GetSuccessorListRet::successors() const {
  // @@protoc_insertion_point(field_list:protocol.GetSuccessorListRet.successors)
  return successors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chord_2eproto
